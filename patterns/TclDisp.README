############################################################################
#                                                                          #
# Copyright (c) 1993-1994 CASPUR Consortium                                # 
#                         c/o Universita' "La Sapienza", Rome, Italy       #
# All rights reserved.                                                     #
#                                                                          #
# Permission is hereby granted, without written agreement and without      #
# license or royalty fees, to use, copy, modify, and distribute this       #
# software and its documentation for any purpose, provided that the        #
# above copyright notice and the following two paragraphs and the team     #
# reference appear in all copies of this software.                         #
#                                                                          #
# IN NO EVENT SHALL THE CASPUR CONSORTIUM BE LIABLE TO ANY PARTY FOR       #
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING  #
# OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE       #
# CASPUR CONSORTIUM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    #
#                                                                          #
# THE CASPUR CONSORTIUM SPECIFICALLY DISCLAIMS ANY WARRANTIES,             #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY #
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER   #
# IS ON AN "AS IS" BASIS, AND THE CASPUR CONSORTIUM HAS NO OBLIGATION TO   #
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.   #
#                                                                          #
#       +----------------------------------------------------------+       #
#       |   The ControlHost Team: Ruten Gurin, Andrei Maslennikov  |       #
#       |   Contact e-mail      : ControlHost@caspur.it            |       #
#       +----------------------------------------------------------+       #
#                                                                          #
############################################################################

$Id: TclDisp.README,v 1.5 1995/05/10 08:52:52 ruten Exp $

Short instruction on creation of Tcl/Dispatcher applications

Let BASE = Control Host directory

1) Take the file BASE/patterns/pat_tcl_user.c and update it
    for your specific needs. Comments inside the file will
    help you to do it. In simple cases you can use it "as is".
    In this case you may skip the steps 2-3 and instead of
    building your own executable use the pre-built one -
     BASE/bin/tcldisp

2) Take the file BASE/patterns/pat_Makefile.AIX (or BASE/patterns/pat_Makefile.gmake)
   and create your own makefile to build your Tcl/Disp application.
   ( TCL_CLIENT in pattern Makefile ).

3) Run this makefile, producing the executable.
   Let it name be (for example) mytcldisp

4) Create your Tcl script using new Tcl commands:

      set line [dispconnect hostname]
      dispsubscribe $line subscrlist
      dispmyid $line nickname
      dispsend $line tag data
      dispdrop $line
      set clist [dispwhereis hostname nickname]
   
   e.g.:
     global line1 line2
     set line1 [dispconnect "rschqa"]
     set line2 [dispconnect "rschqb"]
     dispsubscribe $line1 "a TAGA a TAGB"
     dispsubscribe $line2 "a TAGC a TAGD"
     dispmyid $line1 "ItsMe"
     dispmyid $line2 "ItsAlsoMe"
     dispsend $line1 "URGENT" "Hello everybody!"
     dispsend $line2 "URGENT" "Hello everybody on rschqb also!"
     set clist [dispwhereis "rschqa" "ERRLOG"]
     ....


5) run your application with the command

   mytcldisp [ -display Display ] [ -title WindowTiltle ] \
      your_tcl_script_name arguments_of_your_script

If you have used pat_tcl_user.c file "as is", or have used the
pre-built file BASE/bin/tcldisp
then for every possible incoming data tag you must have
in your Tcl script the procedure whose name is exactly that tag name
The procedure must accept exactly one parameter - the data string
arriving with that tag, e.g.:

    proc TAG1 { data } {
      ....
    }
  
