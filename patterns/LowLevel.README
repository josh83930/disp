############################################################################
#                                                                          #
# Copyright (c) 1993-1994 CASPUR Consortium                                # 
#                         c/o Universita' "La Sapienza", Rome, Italy       #
# All rights reserved.                                                     #
#                                                                          #
# Permission is hereby granted, without written agreement and without      #
# license or royalty fees, to use, copy, modify, and distribute this       #
# software and its documentation for any purpose, provided that the        #
# above copyright notice and the following two paragraphs and the team     #
# reference appear in all copies of this software.                         #
#                                                                          #
# IN NO EVENT SHALL THE CASPUR CONSORTIUM BE LIABLE TO ANY PARTY FOR       #
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING  #
# OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE       #
# CASPUR CONSORTIUM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    #
#                                                                          #
# THE CASPUR CONSORTIUM SPECIFICALLY DISCLAIMS ANY WARRANTIES,             #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY #
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER   #
# IS ON AN "AS IS" BASIS, AND THE CASPUR CONSORTIUM HAS NO OBLIGATION TO   #
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.   #
#                                                                          #
#       +----------------------------------------------------------+       #
#       |   The ControlHost Team: Ruten Gurin, Andrei Maslennikov  |       #
#       |   Contact e-mail      : ControlHost@caspur.it            |       #
#       +----------------------------------------------------------+       #
#                                                                          #
############################################################################

$Id: LowLevel.README,v 1.7 1995/04/19 10:47:20 ruten Exp $

This is the description of low level routines
for communications with the dispatcher.

Compared with high level routines,
this routines give you more freedom (e.g. you can organize
communications with several dispatchers simultaneously),
but they require more coding from you.

This document describes the usage of these routines
in "waitng" mode, i.e. if you started some communication
operation with the dispatcher, you will be blocked, until
it's completely finished. Non-waiting mode usage is supposed
to be described in a separate document.
======================================

1. Constants and data structures.
---------------------------------

File "displowl.h" contains (directly or via other include
files) several constants and typedef's you need, as well
as related function prototypes.

You have to include this file into your program.

   Constant TAGSIZE (with value 8) defines the tag length.

   Type prefix_t defines the format of the header which precedes the data
   portions sent to or from the dispatcher.

2. Establishing communication
-----------------------------

     Use the routine
         int dispconnect(const char *hostname);

       The code must be

         int socket;

         socket = dispconnect("rschqa");

       Negative socket value means an error.

       Value "local"  or NULL may be used for connection to the dispatcher 
       on the same host.

     You may have as many connection lines with one or several
     dispatchers as you need.
   
3. Sending the data header to the dispatcher 
-------------------------------------------------------

     Before sending the data to the dispatcher you must fill
     and send the data header.

     For that you must use the routines
       void fillprefix(prefix_t *pref, const char *tag, int datasize);
       int  putbwait(int socket, const void *buffer, int size);

       The code must be

         prefix_t header;
         int rc;
         
         fillprefix(&header,"TAG_TO_BE_SENT",
            size_of_the_data_to_be_sent_NOT_including_the_header); 

         rc = putbwait(socket,&header,sizeof(header));       

       Negative rc means an error.

4. Sending the data themselves
------------------------------

     Use the routine 
         int putbwait(int socket, const void *buffer, int size) 

       Negative return value means an error.
       You can use several calls to putbwait to send the data,
       But the total data length must be equal to the size sent
       in the header.

5. Sending the header and the data together
-------------------------------------------

     Use the routine
         int put_tagged_bwait(int socket, const char *tag, 
                  const void *buffer, int buffer_size) 

       It allows you not to think about header filling.
       Negative return value means an error.


6. Subscription, notification and data skipping mode
----------------------------------------------------

     To send the subscription list for the given socket line
     to the dispatcher use the code 

         char *subscr = "subscription list"; 
            /* See the 'Subscription.README' document */
         int rc;

         rc = put_tagged_bwait(socket,DISPTAG_Subscribe,subscr,strlen(subscr));

       This call completely destroyes the previous subscription list
       on the given line and creates a new one. So you may change your
       subscription on the fly. Initial subscription list on the
       just created line is empty. To return to empty list use the value
       subscr = ""
       

     To ask the dispatcher for the next data portion on the given socket line
     use the code

         rc = put_tagged_bwait(socket,DISPTAG_Gime,NULL,0);

     To tell the dispatcher that on the given socket line
     you want to get the data without using the 'Gime' call 
     (i.e. dispatcher will send them to you
     immediately upon their arrival) use the code 

         rc = put_tagged_bwait(socket,DISPTAG_Always,NULL,0);

     To send the dispatcher the nickname of your socket line use the code

         char *id = "BLABLA";

         rc = put_tagged_bwait(socket,DISPTAG_MyId,id,strlen(id));

     To set the data skipping mode use the code

         char *mode = "all"; /* Other possible values: "none","calc" */

         rc = put_tagged_bwait(socket,DISPTAG_SkipMode,mode,strlen(mode));

     Negative rc in all the examples above means an error.

7. Getting the incoming header
------------------------------

     Use the routines
         int dispcheck(int socket, char *tag, int *size, int wait);

     If the 'wait' parameter is 0 - the routine just check whether the
     complete header arrived, if not - waits for it.
     If header arrived the routine fills 'tag' and 'size' parameters.
     If not - it returns 0.

       The code must be

         int rc;
         char tag[TAGSIZE+1];
         int size;

         rc = dispcheck(socket,&tag,&size,1);     

       Negative rc means an error.

8. Getting the data
-------------------

     When the header arrived on some socket line you may get 
     the data themselves. First you have to anylize the size field of
     the header. If it's negative, than the data are coming via the shared
     memory (to be discussed later). Otherwise use the  routine
         int getbwait(int socket, void *buffer, int size)

         Negative rc means an error.
         You may use several calls to getbwait to get the data,
         but the total length must coincide with the size field in the 
         header received.

9. Waiting for the data on several lines simultaneously 
-------------------------------------------------------

    It is not possible in OS-9.
    On other platforms use routines
       int dispselect(int sec, int microsec);
       int dispprio(int socket, int priority);

    The routine 'dispselect' checks all the lines which were created 
    by the calls to 'dispconnect' routine.
    If any of the arguments sec/microsec is negative - it waits
    until something will happen on one of these lines without any time limit.
    If both parameters are zero - it just checks the lines without waiting.
    In other cases parameters define maximal wait interval.
    If the result is greater or equal 0 - it is the number of 
    the socket with some event on it (data arrived, EOF, error).
    If it is -1 nothing happend.
    If it is less than -1 - some error occured.

    The routine 'dispprio' may be used to set priorities to sockets,
    so when the data will arrive at the same time on several sockets,
    dispselect will choose one with maximal priority. Initial
    socket priority is 0. 


      The code example:
       
         int sock;

         sock = dispselect(0,300000);


10. Getting the data via shared memory
--------------------------------------

     If you got the header with the negative size, you must
     get the data from the shared memory.

       The code must be

         shdata_descr_t shdescr; /* type shdata_descr_t is defined via "dispatch.h" */
         int rc;
         void *dataaddr;
         int datasize = -size; /* data size in the shared memory */

         /* get the data address in shared memory */
         dataaddr = getshared(socket,&shdescr); 
         if( dataaddr == NULL )
           exit(1); /* something has gone wrong */

         process the data buffer pointed by the 'dataaddr' variable
         (or copy it somewhere)

         /* and now unlock it */
         unlockshared(&shdescr);
         /* NEVER forget to unlock the data */

     You must not change any data inside shdescr structure.
     You must not reuse the same shdescr in other calls to 
     getshared before you did the unlockshared(&shdescr).        

11. Closing the connection line
-------------------------------

     Use the routines
        int dispdrop(int socket);
        void dispalldrop(void); 

     to close the one communication line or all communication lines
     you got by 'dispconnect' calls. 

12. Querying some information
-----------------------------

     Routine
        int dispchannels(void);

     returns the number of channels, opened by dispconnect calls
     and still not closed by dispdrop calls.

     Routine
        const char *dispqhost(int socket);

     returns the name of the host to wich the line 'socket' is connected,
     or NULL if there is no such line.



Notes
-----

     All the 'size/datasize' parameters and values mentioned are in BYTES,
     not in WORDS.

     Try NOT to use hardcoded hostnames in calls to 'dispconnect'
     In the Chorus software NEVER use the hardcoded host name.
     Use the routine 'getdisphost' to find out the dispatcher host name instead.
     It's described in the Interf.README document.

     If you created the connection using the low level interface,
     you must do all the processing on it using the same interface.
     Mixing two levels together may lead to confusions.
