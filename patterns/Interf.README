############################################################################
#                                                                          #
# Copyright (c) 1993-1994 CASPUR Consortium                                # 
#                         c/o Universita' "La Sapienza", Rome, Italy       #
# All rights reserved.                                                     #
#                                                                          #
# Permission is hereby granted, without written agreement and without      #
# license or royalty fees, to use, copy, modify, and distribute this       #
# software and its documentation for any purpose, provided that the        #
# above copyright notice and the following two paragraphs and the team     #
# reference appear in all copies of this software.                         #
#                                                                          #
# IN NO EVENT SHALL THE CASPUR CONSORTIUM BE LIABLE TO ANY PARTY FOR       #
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING  #
# OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE       #
# CASPUR CONSORTIUM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    #
#                                                                          #
# THE CASPUR CONSORTIUM SPECIFICALLY DISCLAIMS ANY WARRANTIES,             #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY #
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER   #
# IS ON AN "AS IS" BASIS, AND THE CASPUR CONSORTIUM HAS NO OBLIGATION TO   #
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.   #
#                                                                          #
#       +----------------------------------------------------------+       #
#       |   The ControlHost Team: Ruten Gurin, Andrei Maslennikov  |       #
#       |   Contact e-mail      : ControlHost@caspur.it            |       #
#       +----------------------------------------------------------+       #
#                                                                          #
############################################################################

$Id: Interf.README,v 1.5 1995/05/10 09:02:49 ruten Exp $

The interfaces for communications with dispatcher
Note: all the tags sent to dispatcher or used in subscription
lists must contain only printable, non-blank characters.

=============================================
C-version:
 
    #include "dispatch.h"
    .......
    int rc;
       Most of the routines return the code.
       Negative value means an error (wrong parameters,
       broken connection etc.)

------------  
    rc = init_disp_link(host,subscr);
      Initiate connection to dispatcher.
      host - string with the name of the host, where dispatcher
        runs, e.g. "chorus1.cern.ch".
        If the program and dispatcher run on the same host,
        NULL or "" may be used as host name.
        On OS-9 only numerical internet address may be used,
        e.g.: "123.456.7.8"
      subscr - string with the tags of data streams, which
        the program wants to receive from the dispatcher.
        See 'Subscription.README' file for more information.
      Example: if you want receive the whole events and nothing else,
        and you run the program on the same host as dispatcher, code
          rc = init_disp_link(NULL,"m EVENT");
 
------------ 
    rc = init_2disp_link(host,subcrdata,subscrcmd);
      The same as previous, but gives you two links to
        dispatcher, one for receiving data, another for
        receiving commands. Two way link allows fast
        command processing, giving them priority over data.
      Example:
          rc = init_2disp_link("chorus1","w HIST1DAT","w CMDCALO");

------------ 
    rc = resubscribe(subscrdata);
      Destroys your previous subscription list and creates a new one.
        If init_2disp_link was used, the subscription is changed only
        on data line, not on the command line.
      Example:
          rc = resubscribe("am HIST2DAT");
 
------------ 
    rc = set_skip_mode(mode);
      Sets data skipping mode.
      mode - one of the strings "all"/"none"/"calc".
        If init_2disp_link was used, the mode is changed only
        on data line, not on the command line.
        Initial mode is "calc".
        See the document SkipModes.README for the modes description.
      Example:
          rc = set_skip_mode("calc");
 
------------ 
    rc = send_me_next();
      Tells the dispatcher, that you are ready to accept
        the next (or first) portion of information from him.

------------ 
    rc = send_me_always();
      Tells the dispatcher, that you are always ready
        to receive the information from him, so he will
        not wait for prompts from you.
      send_me_always must be called only once and
        eliminates the need for repetitive calls
        to send_me_next.
      To use it, you must be sure, that your application
        is fast enough, to process all the incoming data.
        Otherwise you can block the data traffic.

------------
    rc = my_id(my_nick_name);
      Sends to the dispatcher the nickname of your program,
        so some other programs may check, whether your
        program is running or not. Optional.
      my_nick_name must be a string e.g.: "CALOMON"
        or "Calorimeter monitoring program"

------------ 
    rc = whereis(disphost,nickname,replybuffer,replybufferlength);
      Tells you whether the client with the given nickname   
        is connected to the given dispatcher.
        disphost is a string with dispatcher host name,  
           value "local" may also be used.
        nickname is a string with client nickname.
        replybuffer is a string to keep the reply and
          replybufferlength is the size of that buffer.
          Value 0 may also be used as replybufferlength.
          replybuffer is filled with the host name(s) on which
          the client(s) with the given nickname run(s).
          If the real reply is longer than replybufferlength-1, 
          the excessive part is simply ignored.
        rc < 0 - no connection to dispatcher.
        rc = 0 - no clients with the given nickname are connected
             to dispatcher.
        rc = 1 - some client(s) with the given nickname is(are) connected. 
      E.g.:
        char reply[100];
        rc = whereis("local","AHTRI",reply,sizeof(reply));
        rc = whereis("rschqa","CALOMON",NULL,0);

------------ 
    char tag[TAGSIZE+1];
    int nbytes;
    ............
    rc = wait_head(tag,&nbytes);
      Wait for incoming data/command headers
        and returns its tag and the size (in bytes)
        of subsequent data portion.
 
------------
    rc = check_head(tag,&nbytes);
      Same as above, but doesn't wait if no data available.
        Returns 0 in this case,
        and positive value, if the header is here
 
------------
    rc = get_data(buf,lim);
      Gets the data. May be called after successfull call to
        wait_head or check_head.
      buf - buffer for storing the data
      lim - buffer size (in bytes)

------------
    rc = get_string(buf,lim);
      Gets the string. Puts final zero in it.
        On VM converts it to EBCDIC.
        May be called after successfull call to
        wait_head or check_head.
      buf - character string to be filled
      lim - its size
 
------------
    rc = put_fulldata(tag,buf,nbytes);
      Send the data to dispatcher.
      tag - data tag
      buf - buffer to be sent
      nbytes - amount of data in buf
 
------------
    rc = put_fullstring(tag,buf);
      Send the string to dispatcher.
         On VM converts it to ASCII before sending.
      tag - data tag
      buf - string to be sent
 
------------
    int pos;
    .......
 
    rc = put_data(tag,buf,nbytes,&pos);
      The same as put_fulldata, but doesn't wait, if the line
        is already full with data. Returns 0 in that case,
        and sets the proper value to pos.
        Returns positive value if the data transfer complete.
      Must be used like that:
 
      pos = 0;
      fill buf
      nbytes = ...;
      for(;;)
        {
        rc = put_data("HIST1",buf,nbytes,&pos);
        if( rc != 0 )
          break; /* finished or error */
        /* transfer not complete */
        do something
        .....
        }
      check rc
 
 
------------
    int pos;
    .......
 
    rc = put_string(tag,buf,&pos);
      The same as put_fullstring, but doesn't wait, if the line
        is already full with data. Returns 0 in that case,
        and sets the proper value to pos.
        Returns positive value if the data transfer complete.
      Must be used like that:
 
      pos = 0;
      fill buf
      for(;;)
        {
        rc = put_string("HIST1",buf,&pos);
        if( rc != 0 )
          break; /* finished or error */
        /* transfer not complete */
        do something
        .....
        }
      check rc
 
------------
    void *dataaddr;
    .......
 
    dataaddr = get_data_addr();
      The replacement for get_data. Instead of copying
        data to user-supplied buffer, gives you its address in
        shared memory or locally allocated buffer. 
        May be called after successfull call
        to wait_head or check_head (which gives you the data size).
      NULL return value means an error.
      The call to get_data_addr must be followed by
      call to unlock_data (see below).
 
------------
    unlock_data();
      Frees the data locked in shared memory or locally allocated buffer.
      It must be used after call to get_data_addr, like that:
        dataaddr = get_data_addr();
        process or copy the data you need, using dataaddr
        unlock_data();
 
------------
    rc = connected();
      Returns 1 if you are connected to dispatcher, and 0 otherwise

------------
    drop_connection();
      Destroys communication links with the dispatcher
   
 
======================================================
Fortran version (AIX only!):
 
    integer irc
       All the routines set irc.
       Negative value means an error (wrong parameters,
       broken connection etc.)
 
------------
    call init_disp_link(host,subscr,irc)
      Initiate connection to dispatcher.
      host - string with the name of the host, where dispatcher
        runs, e.g. 'chorus1.cern.ch'.
        If the program and dispatcher run on the same host,
        empty string may be used as host name.
      subscr - string with the tags of data streams, which
        the program wants to receive from the dispatcher.
        See 'Subscription.README' file for more information.
      Example: if you want receive the whole events and nothing else,
        and you run the program on the same host as dispatcher, code
          call init_disp_link(' ','w EVENT',irc)
 
------------ 
    call init_2disp_link(host,subcrdata,subscrcmd,irc)
      The same as previous, but gives you two links to
        dispatcher, one for receiving data, another for
        receiving commands. Two way link allows fast
        command processing, giving them priority over data.
      Example:
          call init_2disp_link('chorus1','w HIST1DAT','w CMDCALO',irc)
 
------------ 
    call resubscribe(subscrdata,irc);
      Destroys your previous subscription list and creates a new one.
        If init_2disp_link was used, the subscription is changed only
        on data line, not on the command line.
      Example:
          call resubscribe('am HIST2DAT',irc);
 
------------ 
    call set_skip_mode(mode,irc);
      Sets data skipping mode.
      mode - one of the strings 'all'/'none'/'calc'.
        If init_2disp_link was used, the mode is changed only
        on data line, not on the command line.
        Initial mode is 'calc'.
        See the document SkipModes.README for the modes description.
      Example:
          call set_skip_mode('calc',irc);

------------
    call send_me_next(irc)
      Tells the dispatcher, that you are ready to accept
        the next (or first) portion of information from him.
 
------------
    call send_me_always(irc)
      Tells the dispatcher, that you are always ready
        to receive the information from him, so he will
        not wait for prompts from you.
      send_me_always must be called only once and
        eliminates the need for repetitive calls
        to send_me_next.
      To use it, you must be sure, that your application
        is fast enough, to process all the incoming data.
        Otherwise you can block all the data traffic.
 
------------
    call my_id(my_nick_name,irc)
      Sends to the dispatcher the nickname of your program,
        so some other programs may check, whether your
        program is running or not. Optional.
      my_nick_name must be a string e.g.: 'CALOMON'
        or 'Calorimeter monitoring program'
 
------------ 
    call whereis(disphost,nickname,replybuffer,irc);
      Tells you whether the client with the given nickname   
        is connected to the given dispatcher.
        disphost is a string with dispatcher host name,  
           value 'local' may also be used.
        nickname is a string with client nickname.
        replybuffer is a string to keep the reply.
          It is filled with the host name(s) on which
          the client(s) with the given nickname run(s).
          If the real reply is longer than replybuffer, 
          the excessive part is simply ignored.
        irc < 0 - no connection to dispatcher.
        irc = 0 - no clients with the given nickname are connected
             to dispatcher.
        irc = 1 - some client(s) with the given nickname is(are) connected. 
      E.g.:
        character*100 reply
        call whereis('local','AHTRI',reply,irc);
        call whereis('rschqa','CALOMON',reply,irc);

------------
    character*8 tag
    integer nbytes
    ............
    call wait_head(tag,nbytes,irc)
      Wait for incoming data/command headers
        and returns its tag and the size (in bytes)
        of subsequent data portion.
 
------------
    call check_head(tag,nbytes,irc)
      Same as above, but doesn't wait if no data available.
        Returns 0 in this case,
        and positive value, if the header is here
 
------------
    call get_data(buf,lim,irc)
      Gets the data. May be called after successfull call to
        wait_head or check_head.
      buf - array for storing the data
      lim - array size (in bytes)
 
------------
    call get_string(str,irc)
      The same as get_data, but recieves the data into
      character variable
      and on VM converts it to EBCDIC.
      str - character variable to be filled with incoming data
 
------------ 
    call put_fulldata(tag,buf,nbytes,irc)
      Send the data to dispatcher.
      tag - data tag
      buf - buffer (array) to be sent
      nbytes - amount of data in buf
 
------------ 
    call put_fullstring(tag,buf,irc)
      Send the data to dispatcher.
        On VM convert it to ASCII before sending.
      tag - data tag
      buf - character value to be sent
 
------------
    integer pos
    .......
 
    call put_data(tag,buf,nbytes,pos,irc)
      The same as put_fulldata, but doesn't wait, if the line
        is already full with data. Returns 0 in that case,
        and sets the proper value to pos.
        Returns positive value if the data transfer complete.
      Must be used like that:
 
      pos = 0
      fill buf
      nbytes = ...
 1    continue
        call put_data('HIST1',buf,nbytes,pos,irc)
        if( irc.ne.0 ) goto 2
c                   finished or error
c       transfer not complete
        do something
        .....
        goto 1
 
 2    continue
      check irc
c     end of example

------------
    integer pos
    .......
 
    call put_string(tag,buf,pos,irc)
      The same as put_fullstring, but doesn't wait, if the line
        is already full with data. Returns 0 in that case,
        and sets the proper value to pos.
        Returns positive value if the data transfer complete.
      Must be used like that:
 
      pos = 0
      buf = '.....'
 1    continue
        call put_string('HIST1',buf,pos,irc)
        if( irc.ne.0 ) goto 2
c                   finished or error
c       transfer not complete
        do something
        .....
        goto 1
 
 2    continue
      check irc
c     end of example

------------
    call connected(irc)
      Sets irc to 1 if yoy are connected to the dispatcher,
      and 0 otherwise.

------------
    call drop_connection
      Destroys communication links with the dispatcher
 
